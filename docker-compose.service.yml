# docker-compose.service.yml
# Service Geliştirme ortamı

networks:
  sentiric-net: { name: "${NETWORK_NAME:-sentiric-net}", driver: bridge }

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  minio_data:  

services:
  # --- VERİ KATMANI ---
  postgres:
    build: { context: ../sentiric-postgres }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    build: { context: ../sentiric-rabbitmq }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["15672:15672", "5672:5672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    build: { context: ../sentiric-redis }
    env_file: ["${ENV_FILE_PATH}"]  
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5      

  minio:
    image: quay.io/minio/minio
    env_file: ["${ENV_FILE_PATH}"]
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_API_PORT}:9000" # S3 API portu
      - "${MINIO_CONSOLE_PORT}:9001" # Web arayüzü portu
    volumes:
      - minio_data:/data
    networks:
      - sentiric-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3       

  # --- UYGULAMA SERVİSLERİ ---
  user-service:
    build: { context: ../sentiric-user-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50053"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  dialplan-service:
    build: { context: ../sentiric-dialplan-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy }, user-service: { condition: service_healthy } }
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50054"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s      

  # --- TELEKOM & MEDYA ÇEKİRDEĞİ ---
  media-service:
    image: ghcr.io/sentiric/sentiric-media-service:${TAG:-latest}
    env_file: ["${ENV_FILE_PATH}"]
    volumes:
      - ../sentiric-media-record:${MEDIA_SERVICE_RECORD_BASE_PATH}:rw
      - "${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"
    ports: 
      - "${MEDIA_SERVICE_PORT}:${MEDIA_SERVICE_PORT}"
      # - "${MEDIA_SERVICE_METRICS_PORT}:${MEDIA_SERVICE_METRICS_PORT}"      
      - "${MEDIA_SERVICE_GRPC_PORT}:${MEDIA_SERVICE_GRPC_PORT}"
      - "${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50052"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  sip-signaling:
    build: { context: ../sentiric-sip-signaling-service }
    env_file: ["${ENV_FILE_PATH}"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${SIP_SIGNALING_SERVICE_PORT:-5060}:${SIP_SIGNALING_SERVICE_PORT:-5060}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: { 
      rabbitmq: { condition: service_healthy },
      media-service: { condition: service_healthy },
      redis: { condition: service_healthy },
    }

