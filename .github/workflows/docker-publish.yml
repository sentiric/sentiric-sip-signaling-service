# Dosya Yolu: .github/workflows/docker-ci.yml

name: Docker Image CI for SIP Signaling Service

on:
  # 'main' branch'ine her push yapıldığında bu CI'ı tetikle
  push:
    branches: [ "main" ]
  
  # GitHub arayüzünden manuel olarak da çalıştırabilmek için
  workflow_dispatch:

jobs:
  build_and_push:
    # Bu iş, en son Ubuntu sürümünde çalışacak
    runs-on: ubuntu-latest

    # Bu işin, GitHub Packages'a yazma ve repoyu okuma izinlerine ihtiyacı var
    permissions:
      contents: read
      packages: write

    steps:
      # --- Adım 1: Repoyu ve İçindeki Submodule'leri Klonla ---
      # 'submodules: recursive' parametresi, .gitmodules dosyasında tanımlı olan
      # 'core-interfaces' reposunu otomatik olarak klonlayacaktır.
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # --- Adım 2: Docker Buildx Kurulumu ---
      # Bu, Docker'ın daha gelişmiş özelliklerini kullanmamızı sağlar.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # --- Adım 3: GitHub Container Registry'ye Giriş Yap ---
      # GITHUB_TOKEN, Actions tarafından otomatik olarak sağlanan bir secret'tır.
      # Bu, güvenli bir şekilde kendi paket repomuza bağlanmamızı sağlar.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Adım 4: Docker İmajını Oluştur ve Yayınla ---
      # Bu adım, projenin ana dizinindeki Dockerfile'ı kullanarak imajı oluşturur
      # ve 'main' branch'ine pushlandığı için 'latest' etiketiyle yayınlar.
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          # context, Dockerfile'ın bulunduğu yerdir. Reponun ana dizini.
          context: .
          # push: true, imajın build edildikten sonra registry'ye gönderileceğini belirtir.
          push: true
          # tags, imajın adını ve etiketini belirler.
          tags: ghcr.io/${{ github.repository }}:latest
          # Derleme sırasında önbellek kullanarak gelecekteki build'leri hızlandırır.
          cache-from: type=gha
          cache-to: type=gha,mode=max